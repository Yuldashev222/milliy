# Generated by Django 4.0.4 on 2022-05-25 19:23

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Antonym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Hyperonym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Hyponym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='InfoNoun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=100)),
                ('noun_types', models.CharField(choices=[('shaxs', 'Shaxs otlar'), ('narsa', 'Narsa otlar'), ('orin_joy', "O'rin-joy otlar"), ('faoliyat', 'Faoliyat-otlari')], default='shaxs', max_length=15)),
                ('noun_types_structure', models.CharField(choices=[('sodda', 'Sodda'), ('qoshma', "Qo'shma"), ('juft', 'Juft'), ('takroriy', 'Takroriy')], default='sodda', max_length=15)),
                ('noun_making', models.CharField(choices=[('morfologik', 'Morfologik usul'), ('sintaktik', 'Sintaktik usul')], default='morfologik', max_length=15)),
                ('review', models.CharField(max_length=1000)),
                ('antonym', models.ManyToManyField(blank=True, to='mainapp.antonym')),
                ('hyperonym', models.ManyToManyField(blank=True, to='mainapp.hyperonym')),
                ('hyponym', models.ManyToManyField(blank=True, to='mainapp.hyponym')),
                ('synonym', models.ManyToManyField(blank=True, to='mainapp.synonym')),
            ],
        ),
        migrations.CreateModel(
            name='InfoAdjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=100)),
                ('adjectives_two', models.CharField(choices=[('asliy_sifat', 'Asliy sifat'), ('nisbiy_sifat', 'Nisbiy sifat')], default='asliy_sifat', max_length=15)),
                ('adjective_type', models.CharField(choices=[('xususiyat', 'Xususiyat sifatlari'), ('rang_tus', 'Rang – tus sifatlari'), ('maza_tam', 'Maza – ta’m sifatlari'), ('hajm_olchov', 'Hajm – o’lchov sifatlari'), ('hid', 'Hid sifatlari'), ('makon_zamon', 'Makon-zamon sifatlari')], default='xususiyat', max_length=15)),
                ('adjective_level', models.CharField(choices=[('oddiy', 'Oddiy'), ('orttirma', 'Orttirma'), ('ozaytirma', 'Ozaytirma'), ('qiyosiy', 'Qiyosiy')], default='oddiy', max_length=15)),
                ('adjective_type_structure', models.CharField(choices=[('sodda_tub', 'Sodda tub'), ('sodda_yasama', 'Sodda yasama'), ('qoshma', "Qo'shma"), ('juft', 'Juft'), ('takroriy', 'Takroriy')], default='sodda_tub', max_length=15)),
                ('review', models.CharField(max_length=1000)),
                ('antonym', models.ManyToManyField(blank=True, to='mainapp.antonym')),
                ('hyperonym', models.ManyToManyField(blank=True, to='mainapp.hyperonym')),
                ('hyponym', models.ManyToManyField(blank=True, to='mainapp.hyponym')),
                ('synonym', models.ManyToManyField(blank=True, to='mainapp.synonym')),
            ],
        ),
    ]
